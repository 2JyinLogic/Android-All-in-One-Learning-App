public class SensorsExampleActivity extends AppCompatActivity implements SensorEventListener {

    // ...

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        // ... 
        sensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
        listAllSensors();
        getSensors();
    }

    /**
     * List all sensors available on the device and store them in
     * deviceSensors.
     */
    void listAllSensors() {
        deviceSensors = sensorManager.getSensorList(Sensor.TYPE_ALL);
        numSensorsText.setText("Number of sensors: " + deviceSensors.size());
    }

    /**
     * Get the sensors that are to be used in this example.
     */
    void getSensors() {
        lightSensor = sensorManager.getDefaultSensor(Sensor.TYPE_LIGHT);
        accelerometerSensor = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
        proximitySensor = sensorManager.getDefaultSensor(Sensor.TYPE_PROXIMITY);
        tempSensor = sensorManager.getDefaultSensor(Sensor.TYPE_AMBIENT_TEMPERATURE);

        if(lightSensor == null) {
            sensor1Text.setText("Not available");
            sensor1AccText.setText("Not available");
        }
        if(accelerometerSensor == null) {
            sensor2Text.setText("Not available");
            sensor2AccText.setText("Not available");
        }
        if(proximitySensor == null) {
            sensor3Text.setText("Not available");
            sensor3AccText.setText("Not available");
        }
        if(tempSensor == null) {
            sensor4Text.setText("Not available");
            sensor4AccText.setText("Not available");
        }
    }

    @Override
    public final void onAccuracyChanged(Sensor sensor, int accuracy) {
        // Do something here if sensor accuracy changes.
        switch(sensor.getType()) {
            case Sensor.TYPE_LIGHT:
                sensor1AccText.setText("Acc: " + accuracy);
                break;
            case Sensor.TYPE_ACCELEROMETER:
                sensor2AccText.setText("Acc: " + accuracy);
                break;
            case Sensor.TYPE_PROXIMITY:
                sensor3AccText.setText("Acc: " + accuracy);
                break;
            case Sensor.TYPE_AMBIENT_TEMPERATURE:
                sensor4AccText.setText("Acc: " + accuracy);
                break;
        }
    }

    @Override
    public final void onSensorChanged(SensorEvent event) {
        switch(event.sensor.getType()) {
            case Sensor.TYPE_LIGHT:
                float lux = event.values[0];
                sensor1Text.setText("Value: " + lux);
                break;
            case Sensor.TYPE_ACCELEROMETER:
                float gx = event.values[0];
                float gy = event.values[1];
                float gz = event.values[2];
                sensor2Text.setText("Value: " + gx + ", " + gy + ", " + gz);
                break;
            case Sensor.TYPE_PROXIMITY:
                float dist = event.values[0];
                sensor3Text.setText("Value: " + dist);
                break;
            case Sensor.TYPE_AMBIENT_TEMPERATURE:
                float temp = event.values[0];
                sensor4Text.setText("Value: " + temp);
                break;
        }
    }

    @Override
    protected void onResume() {
        // It's called after onCreate() so by now the sensors are created.
        super.onResume();
        sensorManager.registerListener(this, lightSensor, SensorManager.SENSOR_DELAY_NORMAL);
        sensorManager.registerListener(this, accelerometerSensor, SensorManager.SENSOR_DELAY_NORMAL);
        sensorManager.registerListener(this, proximitySensor, SensorManager.SENSOR_DELAY_NORMAL);
        sensorManager.registerListener(this, tempSensor, SensorManager.SENSOR_DELAY_NORMAL);
        // Specifying the delay in microseconds only works from Android 2.3 (API level 9) onwards.
        // For earlier releases, you must use one of the SENSOR_DELAY_* constants.
        // You must also declare the HIGH_SAMPLING_RATE_SENSORS permission
//        sensorManager.registerListener(this, lightSensor, 1000);
//        sensorManager.registerListener(this, accelerometerSensor, 1000);
//        sensorManager.registerListener(this, proximitySensor, 1000);
//        sensorManager.registerListener(this, tempSensor, 1000);
    }

    @Override
    protected void onPause() {
        super.onPause();
        sensorManager.unregisterListener(this);
    }

}